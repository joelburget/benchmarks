- finish css forms
x signal/js \n -> <br /> (Works with pre tags, not code?)
x right hand menu
- documentation
x remove ugly from user profiles
x favicon (change link later)
- logo?
x icons throughout website (famfamfam)
x rss feeds
- file management in edit posts
x remove comment file upload (or get them working)
- new page js validation
x Django minify inline JS/CSS tags
- Minify external js files/combine into one
- Finish revision views (AJAX, degraded view, etc)
- group editing (might need to edit author setting in revision)
- port revisions to save signal, rather than in view code
- New post page - double tab on validation page
- Fix HTML Soup (including removing b/i tags, nasty css hacks w/margins etc.)
- More rigid post structures (as dr. weide said)
- Advanced search (flash of hidden content? ask others if they get it)
- user page design
- secret key - change on deployment

= New from Cleaning List =
- port view logic into generic views
 - see http://stackoverflow.com/questions/1970104/django-pagination-in-generic-views
 - or even pagify if we have weird problems -
http://stackoverflow.com/questions/669903/pagination-of-date-based-generic-views-in-django/905480#905480
- change all forms to ModelForms, eliminate hardcoding, if possible
- make all redirects for bad input etc. go to a standard error form
 - from benchmarks.helpers import redirect_error, sig:
redirect_error(error, link=None)
 - errors.html with an error var, as well as an optional link var,
showing where
   the user could go next (ex. delete
edituser_bad/login_invalid/comments_error.html etc.
   and make it redirect here instead)
- custom decorators (@post/get/ajax_required, otherwise direct to 'bad
request' pages), keep code DRY
 - allows us to do:
   @login_required
   @post_required
   def new_post(...):
     ...
- refactor post search (it's ugly and hacky)
- render_to_response wrapper w/ReqCon embedded -
http://djangosnippets.org/snippets/3/
 - we write this _a lot_ and it'll keep the code slightly more DRY
- testmaker tests and model tests (test signals, etc. esp.)
- better LaTeX help links:
 - pdf - http://www.ctan.org/tex-archive/info/symbols/comprehensive/
 - this one might be good: http://www.csulb.edu/~fnewberg/Research/latexsymbols.pdf
- too large?
 - draw - http://detexify.kirelabs.org/classify.html
x remove clutter like models.py files for apps/stuff that don't use
them (templatetags)
x move stuff in comment-sanitizer into models
- port revisions/etc into alternative save methods rather than in
views (save_revision)
 - remember optional (..., files=[]) param, so you can keep files out
of the view too
   when you implement them
 - or check out django_reversion
- duplicate code in posthistory/revision_info - refactor
- Naming - consistent_method_name_style and names (history/revision)
x fix Post.history() to not include self in posts w/history included
x post history stuff - add to lastpage middleware configuration
x pyflakes/lint/checker - remove unused imports
- pre vs. code - make code just monospace font?
- css refactoring - use variables etc.
x move deprecated html elements like b/i out
- substantial/unsubstantial changes - radioboxes for problem editing to say if solutions are old, etc.
- move comments on frontpage etc. to partials
